process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const { readFileSync } = require('fs');
const { Fireblocks, TransferPeerPathType } = require("@fireblocks/ts-sdk");
const { Hbar, TransferTransaction, PrivateKey, AccountId, Client } = require("@hashgraph/sdk");


const FIREBLOCKS_API_SECRET_PATH = "../../editor_sandbox_lbg_user_secret.key";
//const FIREBLOCKS_API_SECRET_PATH = "../../converted_key.pem";

const FIREBLOCKS_API_SECRET_DER_PATH = "../../private_key.der";

// Initialize a Fireblocks API instance with local variables
const fireblocks = new Fireblocks({
    apiKey: "68f17824-2bc4-4803-b573-8d36a562f72a",
    basePath: "https://sandbox-api.fireblocks.io/v1",
    secretKey: readFileSync(FIREBLOCKS_API_SECRET_PATH, "utf8"),
    testnet: true,
});

// creating a new vault account
async function createVault() {
    try {
        const vault = await fireblocks.vaults.createVaultAccount({
            createVaultAccountRequest: {
                name: 'Vault generated by SDK',
                hiddenOnUI: false,
                autoFuel: true
            }
        });
        console.log(JSON.stringify(vault.data, null, 2))
    } catch (e) {
        console.log(e);
    }
}


//retrive vault accounts
async function getVaultPagedAccounts(limit) {
    try {
        const vaults = await fireblocks.vaults.getPagedVaultAccounts({
            limit
        });
        console.log(JSON.stringify(vaults.data, null, 2))
    } catch (e) {
        console.log(e);
    }
}

// create a transaction
async function createTransaction(assetId, amount, srcId, destId) {
    try {
        let payload = {
            assetId,
            amount,
            source: {
                type: TransferPeerPathType.VaultAccount,
                id: String(srcId)
            },
            destination: {
                type: TransferPeerPathType.VaultAccount,
                id: String(destId)
            },
            note: "Transfer HBAR"
        };

        const result = await fireblocks.transactions.createTransaction({ transactionRequest: payload });
        console.log(JSON.stringify(result, null, 2));
    } catch (error) {
            console.error('Error creating transaction:', error);
        }
    
    }


    async function getAddress(){
        let body = {
            // The ID of the vault account to return
            vaultAccountId: 1,
            // The ID of the asset
            assetId: "HBAR_TEST"
          };

        //   res = await fireblocks.vaults.getVaultAccountAssetAddressesPaginated(body);
          res = await fireblocks.vaults.get(body);
          return res.data.addresses[0].address;
    }

    async function transferToAddress(destinationAddress) {
        const operatorIdStr = await getAddress();
        const operatorKeyStr = readFileSync(FIREBLOCKS_API_SECRET_PATH, "utf8");
        //const operatorKeyStr = readFileSync(FIREBLOCKS_API_SECRET_DER_PATH, "utf8");
        
        
        const operatorId = AccountId.fromString(operatorIdStr);
        const operatorKey = await PrivateKey.fromPem(operatorKeyStr);
        //const operatorKey = await PrivateKey.fromStringDerPem(operatorKeyStr);
        console.log("Private Key:", operatorKey.toString());
        //const operatorKey = await PrivateKey.fromStringDer(operatorKeyStr);
        client = await Client.forTestnet().setOperator(operatorId, operatorKey);
        console.log(operatorKey);

        const fromAccountId = await getAddress();
        console.log(fromAccountId);
        const amount = new Hbar(0.1);
        const destAddress = "0.0.5784020";

        const transaction = new TransferTransaction()
            .addHbarTransfer(operatorId, amount.negated())
            .addHbarTransfer(destAddress, amount);
        const txResponse = await transaction.execute(client);
        //Request the receipt of the transaction
        const receipt = await txResponse.getReceipt(client);
        //Get the transaction consensus status
        const transactionStatus = receipt.status;

        console.log(transactionStatus.toString())
        
    }


/*
getAddress()
createVault()
getVaultPagedAccounts(5)

createTransaction("HBAR_TEST", "0.1", "1", "3").catch(error => {
    console.error('Error creating transaction:', error);
});
*/
transferToAddress("0.0.5784020")
module.exports = {createTransaction, getVaultPagedAccounts, createTransaction, getAddress}
